PTRACE_TRACEME: Устанавливает текущий процесс в режим отслеживаемого, который затем может быть присоединен с помощью PTRACE_ATTACH.
PTRACE_ATTACH: Присоединяет текущий процесс к отслеживаемому процессу.
PTRACE_DETACH: Отсоединяет текущий процесс от отслеживаемого процесса.
PTRACE_GETREGS и PTRACE_SETREGS: Получает и устанавливает значения регистров процесса.
PTRACE_SYSCALL: Продолжает выполнение процесса до следующего системного вызова.
PTRACE_PEEKTEXT, PTRACE_PEEKDATA, PTRACE_POKETEXT, PTRACE_POKEDATA: Чтение и запись данных в память процесса.


Функция wait(NULL) - это системный вызов, который используется для ожидания завершения дочернего процесса.

Если вызывается в родительском процессе, он приостанавливает выполнение родительского процесса до тех пор, пока какой-либо из его дочерних процессов не завершится.
Когда дочерний процесс завершается, wait() возвращает идентификатор завершившегося дочернего процесса.

В данном контексте orig_rax используется для сохранения значения регистра процессора rax, который содержит номер текущего системного вызова в процессе.
Поскольку это значение типа long, оно может хранить целые числа, которые могут быть возвращены как результат системного вызова в пространстве пользователя.

wait(&status); - это вызов системного вызова wait(), который блокирует выполнение родительского процесса до тех пор, пока один из его дочерних процессов не завершится. После завершения дочернего процесса информация о его состоянии будет сохранена в переменной status.

if (!WIFSTOPPED(status)) - это проверка, с помощью макроса WIFSTOPPED(), на то, был ли дочерний процесс остановлен сигналом (например, для отладки). 
Если дочерний процесс не был остановлен сигналом, то это условие выполняется, и код внутри блока if будет выполнен.

System call number: 12 - Это системный вызов sys_brk, который используется для расширения или сокращения размера кучи процесса.
System call number: 158 - Это системный вызов sys_mmap, который используется для создания отображений памяти в адресном пространстве процесса.
System call number: 9 - Это системный вызов sys_munmap, который используется для удаления отображений памяти из адресного пространства процесса.
System call number: 21 - Это системный вызов sys_access, который используется для проверки доступа к файлу.
System call number: 257 - Это системный вызов sys_openat, который используется для открытия или создания файла.
System call number: 262 - Это системный вызов sys_fstat, который используется для получения информации о файле.
System call number: 0 - Это системный вызов sys_read, который используется для чтения данных из файла.
System call number: 3 - Это системный вызов sys_close, который используется для закрытия файла.

Вызов функции fork создает новый процесс — копию вызывающего процесса.
Мы называем вызывающий процесс родительским процессом, а вновь создан-
ный — дочерним. В родительском процессе функция fork возвращает иденти-
фикатор дочернего процесса, в дочернем процессе — 0. Поскольку fork создает
новый процесс, можно сказать, что она вызывается один раз — родительским
процессом, а возвращает управление дважды — в родительском и в дочернем
процессах.